// This file has been generated by Specta. DO NOT EDIT.

import { createTauRPCProxy as createProxy, type InferCommandOutput } from 'taurpc'
type TAURI_CHANNEL<T> = (response: T) => void


export type AgentConfig = { livekit_url: string; livekit_api_key: string; livekit_api_secret: string; anthropic_api_key: string; codebase_path?: string | null }

export type AgentStatus = { running: boolean; pid: number | null }

export type ClaudeMetricsRequest = { data_dir: string | null; hours_back: number | null; python_path: string | null }

export type ClaudeMetricsSnapshot = { timestamp: string; window_hours: number; burn_rate_per_hour: number; total_cost_usd: number; input_tokens: number; output_tokens: number; cache_creation_tokens: number; cache_read_tokens: number; total_tokens: number; session_count: number; active_session_id: string | null; last_activity: string; source: string | null }

export type ClaudeQuestionRequest = { api_key: string; question: string; code_context: string | null; model: string | null; max_output_tokens: number | null; temperature: number | null; system_prompt: string | null }

export type ClaudeQuestionResponse = { answer: string; model: string; stop_reason: string | null; usage: ClaudeUsage | null }

export type ClaudeUsage = { input_tokens: number; output_tokens: number }

export type ClaudeVoiceRequest = { api_key: string; audio_base64: string; audio_format: string | null; transcript_hint: string | null; code_context: string | null; model: string | null; max_output_tokens: number | null; temperature: number | null; system_prompt: string | null; voice: string | null }

export type ClaudeVoiceResponse = { answer_text: string; answer_audio_base64: string | null; answer_audio_mime_type: string | null; transcript: string | null; model: string; stop_reason: string | null; usage: ClaudeUsage | null }

export type LivekitTokenRequest = { api_key: string; api_secret: string; identity: string; room: string; name: string | null; metadata: string | null; ttl_seconds: number | null; can_publish: boolean | null; can_subscribe: boolean | null; can_publish_data: boolean | null }

export type LivekitTokenResponse = { token: string; expires_at: string }

export type PushClaudeMetricsRequest = { metrics: ClaudeMetricsSnapshot; server_url: string; auth_token: string | null }

const ARGS_MAP = { '':'{"ask_claude":["request"],"ask_claude_voice":["request"],"collect_claude_metrics":["request"],"connect_device":["github_token","wifi_name","wifi_pass"],"generate_livekit_token":["request"],"get_agent_status":[],"load_agent_config":[],"push_claude_metrics":["request"],"save_agent_config":["config"],"start_agent":[],"stop_agent":[]}' }
export type Router = { "": {ask_claude: (request: ClaudeQuestionRequest) => Promise<ClaudeQuestionResponse>, 
ask_claude_voice: (request: ClaudeVoiceRequest) => Promise<ClaudeVoiceResponse>, 
collect_claude_metrics: (request: ClaudeMetricsRequest) => Promise<ClaudeMetricsSnapshot>, 
connect_device: (githubToken: string, wifiName: string, wifiPass: string) => Promise<string>, 
generate_livekit_token: (request: LivekitTokenRequest) => Promise<LivekitTokenResponse>, 
get_agent_status: () => Promise<AgentStatus>, 
load_agent_config: () => Promise<AgentConfig | null>, 
push_claude_metrics: (request: PushClaudeMetricsRequest) => Promise<ClaudeMetricsSnapshot>, 
save_agent_config: (config: AgentConfig) => Promise<null>, 
start_agent: () => Promise<AgentStatus>, 
stop_agent: () => Promise<null>} };


export const createTauRPCProxy = () => createProxy<Router>(ARGS_MAP)
export type { InferCommandOutput }
